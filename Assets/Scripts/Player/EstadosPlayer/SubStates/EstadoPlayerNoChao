using UnityEngine;

public class EstadoPlayerNoChao : EstadoPlayer
{
    protected int xInput;
    protected int yInput;

    protected bool encostouTeto;

    protected Movimento Movimento { get => movimento ?? essencial.GetCoreComponent(ref movimento); }
    private Movimento movimento;

    private Colisoes Colisoes { get => colisoes ?? essencial.GetCoreComponent(ref colisoes); }
    private Colisoes colisoes;

    private bool inputSalto;
    private bool inputAgarrar;
    private bool pousou;
    private bool encostouParede;
    private bool encostouSaliencia;
    private bool inputDash;

    public EstadoPlayerNoChao(Player player, MaquinaEstadoPlayer maquinaEstado, PlayerData playerData, string nomeAnimBool) : base(player, maquinaEstado, playerData, nomeAnimBool)
    {

    }

    public override void FazerVerificacoes()
    {
        base.FazerVerificacoes();
        
        if(Colisoes)
        {
            pousou = Colisoes.Chao;
            encostouParede = Colisoes.ParedeFrente;
            encostouSaliencia = Colisoes.SalienciaHorizontal;
            encostouTeto = Colisoes.Teto;
        }
        
    }

    public override void Entrar()
    {
        base.Entrar();

        player.EstadoSalto.ReporQuantSaltosRestantes();
        player.EstadoDash.ReporPodeDash();
    }

    public override void Sair()
    {
        base.Sair();
    }

    public override void AtualizarLogica()
    {
        base.AtualizarLogica();

        xInput = player.ManipuladorInput.InputNormaX;
        yInput = player.ManipuladorInput.InputNormaY;
        inputSalto = player.ManipuladorInput.InputSalto;
        inputAgarrar = player.ManipuladorInput.InputAgarrar;
        inputDash = player.ManipuladorInput.InputDash;

        if (player.ManipuladorInput.InputsAtaque[(int)InputsCombate.primario] && !encostouTeto)
        {
            maquinaEstado.TrocarEstado(player.EstadoAtaquePrimario);
        }
        else if (player.ManipuladorInput.InputsAtaque[(int)InputsCombate.secundario] && !encostouTeto)
        {
            maquinaEstado.TrocarEstado(player.EstadoAtaqueSecundario);
        }
        else if (inputSalto && player.EstadoSalto.PodeSaltar() && !encostouTeto)
        {
            maquinaEstado.TrocarEstado(player.EstadoSalto);
        }
        else if(!pousou)
        {
            player.EstadoNoAr.IniciaTempoCoyote();
            maquinaEstado.TrocarEstado(player.EstadoNoAr);
        }
        else if(encostouParede && inputAgarrar && encostouSaliencia)
        {
            maquinaEstado.TrocarEstado(player.EstadoAgarraParede);
        }
        else if (inputDash && player.EstadoDash.VerificaSePodeDash() && !encostouTeto)
        {
            maquinaEstado.TrocarEstado(player.EstadoDash);
        }
    }

    public override void AtualizarFisica()
    {
        base.AtualizarFisica();
    }
}
